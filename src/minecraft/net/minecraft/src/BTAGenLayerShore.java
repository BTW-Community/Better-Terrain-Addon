package net.minecraft.src;

public class BTAGenLayerShore extends BTAGenLayer
{
	private BTAWorldConfigurationInfo generatorInfo;
	
	public BTAGenLayerShore(long par1, GenLayer parent, BTAWorldConfigurationInfo generatorInfo)
	{
		super(par1);
		this.parent = parent;
        this.generatorInfo = generatorInfo;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	public int[] getInts(int par1, int par2, int par3, int par4)
	{
		int[] parentInts = this.parent.getInts(par1 - 1, par2 - 1, par3 + 2, par4 + 2);
		int[] intCache = IntCache.getIntCache(par3 * par4);

		for (int i = 0; i < par4; ++i)
		{
			for (int j = 0; j < par3; ++j)
			{
				this.initChunkSeed((long)(j + par1), (long)(i + par2));
				int currentBiome = parentInts[j + 1 + (i + 1) * (par3 + 2)];
				int neighbor1;
				int neighbor2;
				int neighbor3;
				int neighbor4;

				if (currentBiome == BiomeGenBase.mushroomIsland.biomeID)
				{
					neighbor1 = parentInts[j + 1 + (i + 1 - 1) * (par3 + 2)];
					neighbor2 = parentInts[j + 1 + 1 + (i + 1) * (par3 + 2)];
					neighbor3 = parentInts[j + 1 - 1 + (i + 1) * (par3 + 2)];
					neighbor4 = parentInts[j + 1 + (i + 1 + 1) * (par3 + 2)];

					if (neighbor1 != BiomeGenBase.ocean.biomeID && neighbor2 != BiomeGenBase.ocean.biomeID && neighbor3 != BiomeGenBase.ocean.biomeID && neighbor4 != BiomeGenBase.ocean.biomeID)
					{
						intCache[j + i * par3] = currentBiome;
					}
					else
					{
						intCache[j + i * par3] = BiomeGenBase.mushroomIslandShore.biomeID;
					}
				}
				else if (currentBiome != BiomeGenBase.ocean.biomeID && currentBiome != BiomeGenBase.river.biomeID && currentBiome != BiomeGenBase.swampland.biomeID && currentBiome != BiomeGenBase.extremeHills.biomeID && BTABiomeConfiguration.getEdgeVariantForBiome(currentBiome, this.generatorInfo) == -1)
				{
					neighbor1 = parentInts[j + 1 + (i + 1 - 1) * (par3 + 2)];
					neighbor2 = parentInts[j + 1 + 1 + (i + 1) * (par3 + 2)];
					neighbor3 = parentInts[j + 1 - 1 + (i + 1) * (par3 + 2)];
					neighbor4 = parentInts[j + 1 + (i + 1 + 1) * (par3 + 2)];

					if (neighbor1 != BiomeGenBase.ocean.biomeID && neighbor2 != BiomeGenBase.ocean.biomeID && neighbor3 != BiomeGenBase.ocean.biomeID && neighbor4 != BiomeGenBase.ocean.biomeID)
					{
						intCache[j + i * par3] = currentBiome;
					}
					else
					{
						if (BTABiomeConfiguration.getBeachVariantForBiomes(currentBiome) != -1) {
							intCache[j + i * par3] = BTABiomeConfiguration.getBeachVariantForBiomes(currentBiome);
						}
						else if (BTABiomeConfiguration.shouldBiomeSpawnBeach(currentBiome)){
							intCache[j + i * par3] = BiomeGenBase.beach.biomeID;
						}
						else {
							intCache[j + i * par3] = currentBiome;
						}
					}
				}
				else if (currentBiome == BiomeGenBase.extremeHills.biomeID)
				{
					neighbor1 = parentInts[j + 1 + (i + 1 - 1) * (par3 + 2)];
					neighbor2 = parentInts[j + 1 + 1 + (i + 1) * (par3 + 2)];
					neighbor3 = parentInts[j + 1 - 1 + (i + 1) * (par3 + 2)];
					neighbor4 = parentInts[j + 1 + (i + 1 + 1) * (par3 + 2)];

					if (neighbor1 == BiomeGenBase.extremeHills.biomeID && neighbor2 == BiomeGenBase.extremeHills.biomeID && neighbor3 == BiomeGenBase.extremeHills.biomeID && neighbor4 == BiomeGenBase.extremeHills.biomeID)
					{
						intCache[j + i * par3] = currentBiome;
					}
					else
					{
						intCache[j + i * par3] = BiomeGenBase.extremeHillsEdge.biomeID;
					}
				}
				else
				{
					neighbor1 = parentInts[j + 1 + (i + 1 - 1) * (par3 + 2)];
					neighbor2 = parentInts[j + 1 + 1 + (i + 1) * (par3 + 2)];
					neighbor3 = parentInts[j + 1 - 1 + (i + 1) * (par3 + 2)];
					neighbor4 = parentInts[j + 1 + (i + 1 + 1) * (par3 + 2)];
					
					//If all surrounding biomes are the same as the current biome do not form an edge
					if (neighbor1 == currentBiome && neighbor2 == currentBiome && neighbor3 == currentBiome && neighbor4 == currentBiome) {
						intCache[j + i * par3] = currentBiome;
					}
					//If an edge can be formed with any of the adjacent biomes
					else if ((BTABiomeConfiguration.shouldBiomeConnectWithEdge(neighbor1, this.generatorInfo)) ||
								(BTABiomeConfiguration.shouldBiomeConnectWithEdge(neighbor2, this.generatorInfo)) ||
								(BTABiomeConfiguration.shouldBiomeConnectWithEdge(neighbor3, this.generatorInfo)) ||
								(BTABiomeConfiguration.shouldBiomeConnectWithEdge(neighbor4, this.generatorInfo)) ||
								BTABiomeConfiguration.doesBiomeIgnoreEdgeRestrictions(currentBiome, neighbor1, neighbor2, neighbor3, neighbor4))
					{
						//If current biome is a biome that forms edges
						if (BTABiomeConfiguration.getEdgeVariantForBiome(currentBiome, this.generatorInfo) != -1) {
							intCache[j + i * par3] = BTABiomeConfiguration.getEdgeVariantForBiome(currentBiome, this.generatorInfo);
						}
						else {
							intCache[j + i * par3] = currentBiome;
						}
					}
					else {
						intCache[j + i * par3] = currentBiome;
					}
				}
			}
		}

		return intCache;
	}
}
