package net.minecraft.src;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class BTAGenLayerClimates extends BTAGenLayer {
	private ArrayList<BTABiomeGenBase> biomesForGeneration;
	public static Map<BTAEnumClimate, ArrayList<BTABiomeGenBase>> biomeCategoryMapCached = new HashMap();
	
    public BTAGenLayerClimates(long baseSeed, GenLayer parent, ArrayList<BTABiomeGenBase> biomesForGeneration) {
        super(baseSeed);
        this.parent = parent;
		this.biomesForGeneration = biomesForGeneration;
		
		for (BTAEnumClimate c : BTAEnumClimate.values()) {
			biomeCategoryMapCached.put(c, BTABiomeConfiguration.getClimateListForGenerator(c, this.biomesForGeneration));
		}
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int xOffset, int zOffset, int sizeX, int sizeY) {
        int var5 = xOffset - 1;
        int var6 = zOffset - 1;
        int var7 = sizeX + 2;
        int var8 = sizeY + 2;
        int[] parentArray = this.parent.getInts(var5, var6, var7, var8);
        int[] cache = IntCache.getIntCache(sizeX * sizeY);

        for (int i = 0; i < sizeY; ++i) {
            for (int k = 0; k < sizeX; ++k) {
                int var13 = parentArray[k + 1 + (i + 1) * var7];
                this.initChunkSeed((long)(k + xOffset), (long)(i + zOffset));
                
            	int climateID = this.nextInt(5) - 5;
            	
            	while (biomeCategoryMapCached.get(BTAEnumClimate.fromID(climateID)).size() == 0) {
            		climateID = this.nextInt(5) - 5;
            	}
            	
                cache[k + i * sizeX] = climateID;
            }
        }

        return cache;
    }
}
